// <auto-generated />
using AngularAPIBigBang.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AngularAPIBigBang.Migrations
{
    [DbContext(typeof(DoctorDbcontext))]
    partial class DoctorDbcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AngularAPIBigBang.Models.Doctor", b =>
                {
                    b.Property<int>("DId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DId"));

                    b.Property<string>("DAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DMobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DSpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DId");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("AngularAPIBigBang.Models.Patient", b =>
                {
                    b.Property<int>("PId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PId"));

                    b.Property<int>("DId")
                        .HasColumnType("int");

                    b.Property<string>("PAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PAge")
                        .HasColumnType("int");

                    b.Property<string>("PName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PId");

                    b.HasIndex("DId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("AngularAPIBigBang.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AngularAPIBigBang.Models.Patient", b =>
                {
                    b.HasOne("AngularAPIBigBang.Models.Doctor", "Doctor")
                        .WithMany("Patient")
                        .HasForeignKey("DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("AngularAPIBigBang.Models.Doctor", b =>
                {
                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
